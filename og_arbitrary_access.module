<?php

/**
 * @file
 * Control the group and group content view access of groups by custom logic.
 */

/**
 * Implements hook_entity_info().
 */
function message_entity_info() {
  $items['og_arbitrary_access_type'] = array(
    'label' => t('OG arbitrary access type'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'OgArbitraryAccessType',
    'base table' => 'og_arbitrary_access_type',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'description',
      'name' => 'name',
      'language' => 'language',
    ),
    'bundles' => array(),
    'exportable' => TRUE,
    'export' => array(
      'default hook' => 'default_og_arbitrary_access_type',
    ),
    'bundle of' => 'og_arbitrary_access',
    'module' => 'og_arbitrary_access',
    'access callback' => 'og_arbitrary_access_type_access',
    'entity cache' => module_exists('entitycache'),
  );

  $items['og_arbitrary_access'] = array(
    'label' => t('OG arbitrary access'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'OgArbitraryAccess',
    'base table' => 'og_arbitrary_access',
    'fieldable' => TRUE,
    'access callback' => 'og_arbitrary_access_access',
    'entity keys' => array(
      'id' => 'id',
      'label' => FALSE,
      'bundle' => 'type',
      'language' => 'language',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'og_arbitrary_access',
    'metadata controller class' => 'EntityDefaultMetadataController',
    'views controller class' => 'EntityDefaultViewsController',
    'entity cache' => module_exists('entitycache'),
  );


  // Add bundle info but bypass entity_load() as we cannot use it here.
  if (db_table_exists('og_arbitrary_access_type')) {
    $types = db_select('og_arbitrary_access_type', 'ogat')
      ->fields('ogat')
      ->execute()
      ->fetchAllAssoc('name');
  }


  // Add bundles by plugins.
  foreach ($types as $type_name => $type) {
    $items['og_arbitrary_access']['bundles'][$type_name->name] = array(
      'label' => $type_name->label,
      'admin' => array(
        'path' => 'admin/structure/og_arbitrary_access/manage/%',
        'real path' => 'admin/structure/og_arbitrary_access/manage/' . $type_name->name,
        'bundle argument' => 4,
        'access arguments' => array('administer og arbitrary access types'),
      ),
    );
  }

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function og_arbitrary_access_ctools_plugin_directory($module, $plugin) {
  if ($module == 'og_arbitrary_access') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function og_arbitrary_access_ctools_plugin_type() {
  $plugins['og_arbitrary_access'] = array(
    'classes' => array('class'),
    'process' => 'og_arbitrary_access_plugin_process',
  );
  return $plugins;
}


/**
 * Add defaults values to the normalizer related plugins.
 */
function og_arbitrary_access_plugin_process(&$plugin, $info) {
  // Common operations.
  $plugin += array(
    'description' => '',
  );

  // Call the plugin specific process functions.
  $function = 'og_arbitrary_access_process_' . $info['type'];
  if (function_exists($function)) {
    $function($plugin, $info);
  }
}

/**
 * Include CTools plugins and get all normalizer plugins.
 *
 * @return array
 *   All normalizing plugins.
 */
function og_arbitrary_access_get_og_arbitrary_access_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('og_arbitrary_access', 'og_arbitrary_access');
}

/**
 * Include CTools plugins and get the specified electricity normalizer plugin.
 *
 * @param string $plugin_name
 *   If provided this function only returns the selected plugin.
 *
 * @return array
 *   The selected plugin for electricity normalizer.
 */
function og_arbitrary_access_get_og_arbitrary_access_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('og_arbitrary_access', 'og_arbitrary_access', $plugin_name);
}

/**
 * Return the handler based on major and minor version, and resource name.
 *
 * @param $plugin_name
 *  Name of plugin.
 * @throws Exception
 *  Class not found.
 *
 * @return ElectricityNormalizerInterface | NULL
 *   The handler object if found, or NULL.
 */
function og_arbitrary_access_get_og_arbitrary_access_handler($plugin_name) {
  $cache = &drupal_static(__FUNCTION__);
  if (isset($cache[$plugin_name])) {
    return $cache[$plugin_name];
  }

  $cache[$plugin_name] = NULL;

  ctools_include('plugins');
  $plugin = ctools_get_plugins('og_arbitrary_access', 'og_arbitrary_access', $plugin_name);
  if (!$class = ctools_plugin_load_class('og_arbitrary_access', 'og_arbitrary_access', $plugin_name, 'class')) {
    throw new \Exception("OG access plugin class for '$plugin_name' not found.");
  }
  $handler = new $class($plugin);
  $cache[$plugin_name] = $handler;

  return $cache[$plugin_name];
}

